// Mocks generated by Mockito 5.4.4 from annotations
// in trench_warfare/test/influence_map_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:trench_warfare/core/enums/nation.dart' as _i3;
import 'package:trench_warfare/screens/game_field_screen/model/data/readers/metadata/dto/map_metadata.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MapMetadataRead].
///
/// See the documentation for Mockito's code generation for more information.
class MockMapMetadataRead extends _i1.Mock implements _i2.MapMetadataRead {
  MockMapMetadataRead() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isInWar(
    _i3.Nation? nation1,
    _i3.Nation? nation2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isInWar,
          [
            nation1,
            nation2,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isNeutral(
    _i3.Nation? nation1,
    _i3.Nation? nation2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isNeutral,
          [
            nation1,
            nation2,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isAlly(
    _i3.Nation? nation1,
    _i3.Nation? nation2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isAlly,
          [
            nation1,
            nation2,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<_i3.Nation> getAllAggressive() => (super.noSuchMethod(
        Invocation.method(
          #getAllAggressive,
          [],
        ),
        returnValue: <_i3.Nation>[],
      ) as List<_i3.Nation>);

  @override
  List<_i3.Nation> getEnemies(_i3.Nation? myNation) => (super.noSuchMethod(
        Invocation.method(
          #getEnemies,
          [myNation],
        ),
        returnValue: <_i3.Nation>[],
      ) as List<_i3.Nation>);

  @override
  List<_i3.Nation> getAllied(_i3.Nation? myNation) => (super.noSuchMethod(
        Invocation.method(
          #getAllied,
          [myNation],
        ),
        returnValue: <_i3.Nation>[],
      ) as List<_i3.Nation>);

  @override
  List<_i3.Nation> getNeutral(_i3.Nation? myNation) => (super.noSuchMethod(
        Invocation.method(
          #getNeutral,
          [myNation],
        ),
        returnValue: <_i3.Nation>[],
      ) as List<_i3.Nation>);

  @override
  List<_i3.Nation> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <_i3.Nation>[],
      ) as List<_i3.Nation>);
}
