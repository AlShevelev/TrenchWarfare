// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../database/entities/talker_history_db_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4332078635293440905),
      name: 'TalkerDataDbEntity',
      lastPropertyId: const obx_int.IdUid(9, 5918448870015553261),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8198649107745803603),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7950731184131067211),
            name: 'message',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 846178785455145106),
            name: 'logLevel',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3659514362481207735),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5488543279267005750),
            name: 'key',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7150606349020566957),
            name: 'penFColor',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3439737037213805236),
            name: 'penBColor',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2559605263898787672),
            name: 'time',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5918448870015553261),
            name: 'stackTrace',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 4332078635293440905),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [4036390663965995175, 3377034406171530323],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3037082238910709093,
        8322230449658626567,
        7154222840745891179,
        5223827669256880326,
        3001136329678658329,
        3758257046697067388,
        3725789529605501120,
        499134733215046961,
        3202753595630021765,
        3015041911764701074,
        5858936920019458924,
        6914137639230071088,
        2346508508294854882,
        7699715947932068148,
        3919681862940740580,
        3119890857270017098,
        9204318584145459748,
        8510908930930246586
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    TalkerDataDbEntity: obx_int.EntityDefinition<TalkerDataDbEntity>(
        model: _entities[0],
        toOneRelations: (TalkerDataDbEntity object) => [],
        toManyRelations: (TalkerDataDbEntity object) => {},
        getId: (TalkerDataDbEntity object) => object.id,
        setId: (TalkerDataDbEntity object, int id) {
          object.id = id;
        },
        objectToFB: (TalkerDataDbEntity object, fb.Builder fbb) {
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final keyOffset =
              object.key == null ? null : fbb.writeString(object.key!);
          final stackTraceOffset = object.stackTrace == null
              ? null
              : fbb.writeString(object.stackTrace!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageOffset);
          fbb.addInt64(2, object.logLevel);
          fbb.addOffset(3, titleOffset);
          fbb.addOffset(4, keyOffset);
          fbb.addInt64(5, object.penFColor);
          fbb.addInt64(6, object.penBColor);
          fbb.addInt64(7, object.time.millisecondsSinceEpoch);
          fbb.addOffset(8, stackTraceOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final logLevelParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final timeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final penFColorParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final penBColorParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final stackTraceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = TalkerDataDbEntity(
              id: idParam,
              message: messageParam,
              logLevel: logLevelParam,
              title: titleParam,
              key: keyParam,
              time: timeParam,
              penFColor: penFColorParam,
              penBColor: penBColorParam,
              stackTrace: stackTraceParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [TalkerDataDbEntity] entity fields to define ObjectBox queries.
class TalkerDataDbEntity_ {
  /// See [TalkerDataDbEntity.id].
  static final id =
      obx.QueryIntegerProperty<TalkerDataDbEntity>(_entities[0].properties[0]);

  /// See [TalkerDataDbEntity.message].
  static final message =
      obx.QueryStringProperty<TalkerDataDbEntity>(_entities[0].properties[1]);

  /// See [TalkerDataDbEntity.logLevel].
  static final logLevel =
      obx.QueryIntegerProperty<TalkerDataDbEntity>(_entities[0].properties[2]);

  /// See [TalkerDataDbEntity.title].
  static final title =
      obx.QueryStringProperty<TalkerDataDbEntity>(_entities[0].properties[3]);

  /// See [TalkerDataDbEntity.key].
  static final key =
      obx.QueryStringProperty<TalkerDataDbEntity>(_entities[0].properties[4]);

  /// See [TalkerDataDbEntity.penFColor].
  static final penFColor =
      obx.QueryIntegerProperty<TalkerDataDbEntity>(_entities[0].properties[5]);

  /// See [TalkerDataDbEntity.penBColor].
  static final penBColor =
      obx.QueryIntegerProperty<TalkerDataDbEntity>(_entities[0].properties[6]);

  /// See [TalkerDataDbEntity.time].
  static final time =
      obx.QueryDateProperty<TalkerDataDbEntity>(_entities[0].properties[7]);

  /// See [TalkerDataDbEntity.stackTrace].
  static final stackTrace =
      obx.QueryStringProperty<TalkerDataDbEntity>(_entities[0].properties[8]);
}
